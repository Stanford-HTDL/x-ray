# `X-Ray` Documentation

Python Module: `celery_app.py`
=========================

Module Description:
-------------------
This module initializes and configures a Celery application for executing asynchronous tasks. The Celery application is created using the `Celery` class from the `celery` package. It reads configuration values from environment variables and sets up the necessary parameters for the Celery application.

Author:
-------
Richard Correro (richard@richardcorrero.com)

Module Dependencies:
--------------------
- celery
- os

Global Variables:
----------------
- `CELERY_APP_NAME` (str): The name of the Celery application, read from the environment variable "CELERY_APP_NAME".
- `CELERY_APP_INCLUDE` (str): The modules to include in the Celery application, read from the environment variable "CELERY_APP_INCLUDE".
- `APP_BROKER_URI` (str): The URI of the Celery broker, read from the environment variable "APP_BROKER_URI".
- `APP_BACKEND_URI` (str): The URI of the Celery backend, read from the environment variable "APP_BACKEND_URI".

Functions:
----------
1. `celery_app.start()`: Starts the Celery application.

Classes:
--------
None.

Module Usage:
-------------
1. Import the required modules and packages:
```python
from celery import Celery
import os
```
2. Set the values for the environment variables "CELERY_APP_NAME", "CELERY_APP_INCLUDE", "APP_BROKER_URI", and "APP_BACKEND_URI".
3. Create a new Celery application instance:
```python
celery_app = Celery(
    CELERY_APP_NAME, broker=APP_BROKER_URI, backend=APP_BACKEND_URI, 
    include=[CELERY_APP_INCLUDE]
)
```
4. Optionally, update the Celery application configuration settings:
```python
celery_app.conf.update(
    result_expires=3600,
)
```
5. Start the Celery application:
```python
if __name__ == '__main__':
    celery_app.start()
```

Note:
-----
- Refer to the application user guide for additional optional configurations.

Module Documentation: detection.py

This module provides functions for object detection and evaluation using PyTorch.

Author:
- Richard Correro (richard@richardcorrero.com)

Functions:
- feature(
    bbox: LngLatBbox, fid=None, props=None, projected="geographic", buffer=None, precision=None, id="Bounding Box"
) -> dict:
  - Get the GeoJSON feature corresponding to a tile.
  - Parameters:
    - bbox (LngLatBbox): The bounding box coordinates.
    - fid (str, optional): A feature id.
    - props (dict, optional): Optional extra feature properties.
    - projected (str, optional): Projection type, default is "geographic".
    - buffer (float, optional): Optional buffer distance for the GeoJSON polygon.
    - precision (int, optional): Number of decimal places for GeoJSON coordinates.
    - id (str, optional): Name associated with the GeoJSON object.
  - Returns:
    - dict: A GeoJSON feature.

- bbox_to_geojson(
    bbox: Sequence[float], lng_lat_bbox: LngLatBbox, image_shape: Sequence[int]
) -> dict:
  - Convert a bounding box to a GeoJSON feature.
  - Parameters:
    - bbox (Sequence[float]): The bounding box coordinates.
    - lng_lat_bbox (LngLatBbox): The bounding box in longitude and latitude.
    - image_shape (Sequence[int]): The shape of the image.
  - Returns:
    - dict: A GeoJSON feature.

- collate_fn(batch):
  - Collate function for data batching.

- train_one_epoch(
    model: torch.nn.Module, optimizer: torch.optim.Optimizer, data_loader, device, lr_scheduler=None
) -> float:
  - Train the model for one epoch.
  - Parameters:
    - model (torch.nn.Module): The model to train.
    - optimizer (torch.optim.Optimizer): The optimizer for model parameters.
    - data_loader: The data loader.
    - device: The device to use for training.
    - lr_scheduler (optional): The learning rate scheduler.
  - Returns:
    - float: The running loss during training.

- calculate_map(
    gt_boxes, pr_boxes, scores, thresh, device, form='pascal_voc'
) -> float:
  - Calculate the mean average precision (mAP) for object detection.
  - Parameters:
    - gt_boxes: Ground truth bounding boxes.
    - pr_boxes: Predicted bounding boxes.
    - scores: Confidence scores of the predicted boxes.
    - thresh: IoU threshold for matching boxes.
    - device: The device to use for computation.
    - form (optional): The format of the bounding box coordinates.
  - Returns:
    - float: The mean average precision (mAP) value.

- evaluate(
    model: torch.nn.Module, data_loader, device, thresh_list
) -> float:
  - Evaluate the model's performance on the validation dataset.
  - Parameters:
    - model (torch.nn.Module): The trained model.
    - data_loader: The data loader for the validation dataset.
    - device: The device to use for evaluation.
    - thresh_list: List of IoU thresholds for mAP calculation.
  - Returns:
    - float: The mean average precision (mAP) value.

Module Documentation: load_model_from_file.py

This module provides functions for loading and using pre-trained models for inference.

Author:
- Richard Correro (richard@richardcorrero.com)

Global Variables:
- MODELS (dict): A dictionary mapping model names to their corresponding model classes.

Functions:
- get_device(device: str) -> torch.device:
  - Get the torch device based on the specified device string.
  - Parameters:
    - device (str): The device string specifying the desired device ("CUDA if available else CPU", "CUDA", or "CPU").
  - Returns:
    - torch.device: The torch device object.

- load_model(model_name: str, model_filepath: str, device: torch.device) -> torch.nn.Module:
  - Load a pre-trained model from a file.
  - Parameters:
    - model_name (str): The name of the model to load.
    - model_filepath (str): The file path to the saved model.
    - device (torch.device): The torch device to load the model onto.
  - Returns:
    - torch.nn.Module: The loaded pre-trained model.

Module Documentation: load_model_from_file.py

This module provides functions for loading and using pre-trained models for inference.

Author:
- Richard Correro (richard@richardcorrero.com)

Global Variables:
- MODELS (dict): A dictionary mapping model names to their corresponding model classes.

Functions:
- get_device(device: str) -> torch.device:
  - Get the torch device based on the specified device string.
  - Parameters:
    - device (str): The device string specifying the desired device ("CUDA if available else CPU", "CUDA", or "CPU").
  - Returns:
    - torch.device: The torch device object.

- load_model(model_name: str, model_filepath: str, device: torch.device) -> torch.nn.Module:
  - Load a pre-trained model from a file.
  - Parameters:
    - model_name (str): The name of the model to load.
    - model_filepath (str): The file path to the saved model.
    - device (torch.device): The torch device to load the model onto.
  - Returns:
    - torch.nn.Module: The loaded pre-trained model.

Module Documentation: make_media.py

This module provides functions for preparing and generating media samples based on target geojsons.

Author:
- Richard Correro (richard@richardcorrero.com)

Global Variables:
- SCRIPT_PATH (str): The path of the script.
- PRED_PROCESSORS (dict): A dictionary mapping prediction processor names to their corresponding processor classes.

Functions:
- prep_for_media(
    id: str, save_dir_path: str, pred_processor_name: str
) -> Processor:
  - Prepare the necessary directories and logging for media generation.
  - Parameters:
    - id (str): The identifier for the media generation process.
    - save_dir_path (str): The directory path to save the media files.
    - pred_processor_name (str): The name of the prediction processor to use.
  - Returns:
    - Processor: The instantiated prediction processor.

- make_media_samples(
    target_geojson_strs: List[str], start: str, stop: str, pred_processor: Processor
) -> None:
  - Generate media samples based on the target geojsons.
  - Parameters:
    - target_geojson_strs (List[str]): The list of target geojson strings.
    - start (str): The start time for media generation.
    - stop (str): The stop time for media generation.
    - pred_processor (Processor): The prediction processor object to use for media generation.
  - Returns:
    - None: This function does not return any value.

Module Documentation: mercantile

Web mercator XYZ tile utilities

License:
This module is licensed under the BSD-3-Clause license.

Copyright 2021, Mapbox

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright
  notice, this list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in the
  documentation and/or other materials provided with the distribution.
* Neither the name of the copyright holder nor the names of
  its contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

Classes:

1. `Tile` - An XYZ web mercator tile
   - Attributes:
     - `x`, `y`, `z`: int - x and y indexes of the tile and zoom level z.

2. `LngLat` - A longitude and latitude pair
   - Attributes:
     - `lng`, `lat`: float - Longitude and latitude in decimal degrees east or north.

3. `LngLatBbox` - A geographic bounding box
   - Attributes:
     - `west`, `south`, `east`, `north`: float - Bounding values in decimal degrees.

4. `Bbox` - A web mercator bounding box
   - Attributes:
     - `left`, `bottom`, `right`, `top`: float - Bounding values in meters.

**Functions:**

1. `ul(*tile)` - Returns the upper left longitude and latitude of a tile
   - Parameters:
     - `tile`: Tile or sequence of int - The tile coordinates (x, y, z).
   - Returns:
     - `LngLat` - The upper left longitude and latitude of the tile.

2. `bounds(*tile)` - Returns the bounding box of a tile
   - Parameters:
     - `tile`: Tile or sequence of int - The tile coordinates (x, y, z).
   - Returns:
     - `LngLatBbox` - The bounding box of the tile.

3. `truncate_lnglat(lng, lat)` - Truncates the longitude and latitude values to web mercator limits.
   - Parameters:
     - `lng`: float - Longitude in decimal degrees.
     - `lat`: float - Latitude in decimal degrees.
   - Returns:
     - `float, float` - The truncated longitude and latitude values.

4. `xy(lng, lat, truncate=False)` - Converts longitude and latitude to web mercator x, y coordinates.
   - Parameters:
     - `lng`: float - Longitude in decimal degrees.
     - `lat`: float - Latitude in decimal degrees.
     - `truncate`: bool, optional - Whether to truncate or clip inputs to web mercator limits.
   -

 Returns:
     - `float, float` - The x, y coordinates in web mercator meters.

5. `lnglat(x, y)` - Converts web mercator x, y coordinates to longitude and latitude.
   - Parameters:
     - `x`: float - X coordinate in web mercator meters.
     - `y`: float - Y coordinate in web mercator meters.
   - Returns:
     - `LngLat` - The longitude and latitude coordinates.

6. `parent(*tile)` - Returns the parent tile of a given tile
   - Parameters:
     - `tile`: Tile or sequence of int - The tile coordinates (x, y, z).
   - Returns:
     - `Tile` - The parent tile.

7. `children(*tile)` - Returns the four children tiles of a given tile
   - Parameters:
     - `tile`: Tile or sequence of int - The tile coordinates (x, y, z).
   - Returns:
     - `tuple[Tile, Tile, Tile, Tile]` - The four children tiles.

8. `neighbors(*tile)` - Returns the eight neighboring tiles of a given tile
   - Parameters:
     - `tile`: Tile or sequence of int - The tile coordinates (x, y, z).
   - Returns:
     - `tuple[Tile, Tile, Tile, Tile, Tile, Tile, Tile, Tile]` - The eight neighboring tiles.

9. `quadkey(*tile)` - Returns the quadkey representation of a tile
   - Parameters:
     - `tile`: Tile or sequence of int - The tile coordinates (x, y, z).
   - Returns:
     - `str` - The quadkey representation of the tile.

10. `quadkey_to_tile(quadkey)` - Converts a quadkey to tile coordinates
    - Parameters:
      - `quadkey`: str - The quadkey representation of a tile.
    - Returns:
      - `Tile` - The tile coordinates (x, y, z) corresponding to the quadkey.

Note: This is a brief summary of the available classes and functions provided by the `mercantile` module. For detailed usage instructions and examples, please refer to the official documentation or docstrings associated with each class or function.

Module Documentation: fasterrcnn_resnet_fpn

This module provides a function for constructing a Faster R-CNN model with a ResNet-FPN backbone using torchvision.

Author: Richard Correro (richard@richardcorrero.com)

Functions:

1. `fasterrcnn_resnet_fpn(backbone_name, pretrained=False, progress=True, num_classes=2, pretrained_backbone=True, trainable_backbone_layers=None, **kwargs)`:

   Constructs a Faster R-CNN model with a ResNet-FPN backbone.

   **Parameters:**

   - `backbone_name` (str): Name of the ResNet backbone to use.
   - `pretrained` (bool): If True, returns a model pre-trained on COCO train2017. Default is False.
   - `progress` (bool): If True, displays a progress bar of the download to stderr. Default is True.
   - `num_classes` (int): Number of output classes of the model, including the background. Default is 2.
   - `pretrained_backbone` (bool): If True, returns a model with the backbone pre-trained on Imagenet. Default is True.
   - `trainable_backbone_layers` (int): Number of trainable (not frozen) ResNet layers starting from the final block. Valid values are between 0 and 5, with 5 meaning all backbone layers are trainable. If `None` is passed, the default value is set to 3.
   - `**kwargs`: Additional keyword arguments to be passed to the `FasterRCNN` model.

   **Returns:**

   - `model` (FasterRCNN): The constructed Faster R-CNN model.

Note: This is a brief summary of the `fasterrcnn_resnet_fpn` function provided in the code. For detailed information about the function and its usage, please refer to the function docstring and the associated comments in the code.

Module: models.py

__author__ = "Richard Correro (richard@richardcorrero.com)"

Imports:
- torch.nn as nn
- from ..utils import get_env_var_with_default
- from .model_loaders import fasterrcnn_resnet_fpn
- from .script_utils import arg_is_true

Classes:
- FasterRCNN

Functions:
- parse_args
- forward

Class: FasterRCNN(nn.Module)
- Description: Implements the Faster R-CNN object detection model.
- Inherits: torch.nn.Module

Attributes:
- __name__: Name of the FasterRCNN class ("FasterRCNN")
- IS_OBJECT_DETECTOR: Boolean indicating if it's an object detector (True)
- DEFAULT_BACKBONE_NAME: Default backbone name ("resnet50")
- DEFAULT_NUM_CHANNELS: Default number of input channels (3)
- DEFAULT_NUM_CLASSES: Default number of output classes (2)
- DEFAULT_TRAINABLE_LAYERS: Default number of trainable backbone layers (0)
- DEFAULT_PRETRAINED: Default value for using pretrained weights (False)
- DEFAULT_PROGRESS: Default value for showing progress during model loading (False)
- DEFAULT_PRETRAINED_BACKBONE: Default value for using pretrained backbone weights (True)
- DEFAULT_MIN_SIZE: Default minimum input image size (224)
- DEFAULT_MAX_SIZE: Default maximum input image size (224)

Methods:
- __init__(**kwargs): Initializes the FasterRCNN class instance.
  - Parameters:
    - **kwargs: Keyword arguments for additional customization.
- parse_args(): Parses the environment variables and returns a dictionary of arguments.
- forward(*args, **kwargs): Forward pass of the model.
  - Parameters:
    - *args: Variable length argument list.
    - **kwargs: Keyword arguments.

Function: parse_args()
- Description: Parses the environment variables and returns a dictionary of arguments.
- Returns: Dictionary of arguments.

Function: forward(*args, **kwargs)
- Description: Forward pass of the model.
- Parameters:
  - *args: Variable length argument list.
  - **kwargs: Keyword arguments.
- Returns: Output of the model's forward pass.

Module: pred_processors.py

__author__ = "Richard Correro (richard@richardcorrero.com)"

Classes:
- Processor
- TimeSeriesProcessor
- ConvLSTMCProcessor

Functions:
- None

Constants:
- None

Class: Processor

This class represents a processor that performs various operations on filenames, directories, and files.

Methods:
- sort_filenames(self, filenames: List[str]) -> List[str]:
    Sorts a list of filenames in ascending order and returns the sorted list.

- walk_dir(self, dir_path: str, sort_filenames: Optional[bool] = True) -> Generator:
    Iterates over the directories and files in the specified directory path using os.walk().
    Yields tuples containing the directory path and the list of filenames.
    If sort_filenames is True, the filenames are sorted using the sort_filenames() method before yielding.

- str_to_dict(self, dict_strs: List[str]) -> Generator:
    Converts a list of JSON string representations of dictionaries into actual dictionaries using json.loads().
    Yields the resulting dictionaries.

- get_filepaths(
    self, dirpath: str, filenames: List[str], as_list: Optional[bool] = False
) -> Generator:
    Generates filepaths by joining the specified directory path with each filename in the given list.
    Yields each filepath.
    If as_list is True, all filepaths are collected in a list and yielded at the end.

- read_file_as_pil_image(self, filepath: str) -> Image:
    Reads an image file from the specified filepath using PIL (Python Imaging Library) and converts it to the RGB mode.
    Returns the resulting PIL image.

- read_files_as_pil_image(
    self, filepaths: List[str], return_filepaths: Optional[bool] = False
) -> List[Image.Image]:
    Reads multiple image files from the given list of filepaths using the read_file_as_pil_image() method.
    Returns a list of PIL images.
    If return_filepaths is True, the list of filepaths is also returned alongside the list of images.

Properties:
- __name__:
    The name of the Processor class.

Class: TimeSeriesProcessor

This class extends the Processor class and adds additional functionality for processing time series data.

Methods:
- _open_geojson(self, geojson_path: str) -> dict:
    Opens and reads a geojson file from the specified file path and returns the parsed JSON content as a dictionary.

- _get_tiles(self, geojson: dict, zooms: List[str], truncate: bool) -> Generator:
    Extracts tile information from the provided geojson dictionary and generates Tile objects for each tile within the specified zoom levels.
    Yields each Tile object.

- _get_mosaic_time_str_from_start_end(self, start: str, end: str) -> List[str]:
    Generates a list of mosaic time strings (formatted as "YYYY_MM") based on the provided start and end date strings.
    Returns the list of time strings.

- _make_papi_time_series_requests(
    self, tiles_list: List[int], geojson_name: str, start: str, end: str, 
    false_color_index: str
) -> Generator:
    Constructs requests for Planet API time series data retrieval based on the provided parameters.
    Yields a tuple containing the request URLs, tile information, geojson name, and dates.

- _make_planet_monthly_time_series_requests(
    self, tiles_list: List[Tile], geojson_name: str, start: str, 
    end: str, false_color_index: Optional[str] = None
) -> Generator:
    Generates time series requests for monthly mosaic data from the Planet API based on the provided tiles and other parameters.

Module: predict.py

__author__:
    Richard Correro (richard@richardcorrero.com)

Classes:
    - ObjectDetectorProcessor
    - Processor

Functions:
    - get_args
    - prep_for_prediction
    - predict

Constants:
    - SCRIPT_PATH
    - PRED_PROCESSORS

---

ObjectDetectorProcessor:
    A class representing an object detector processor.

    Methods:
        - make_samples(target_geojson_strs: List[str], start: str, end: str) -> List[Dict[str, Any]]:
            Creates samples for prediction based on target GeoJSON strings and start/end times.

        - save_results(input: Dict[str, Any], output: Any) -> None:
            Saves the prediction results based on the input and output data.

        - args: Dict[str, Any]
            Arguments specific to the object detector processor.

Processor:
    A base class for processors.

    Methods:
        - make_samples(target_geojson_strs: List[str], start: str, end: str) -> List[Dict[str, Any]]:
            Abstract method for creating samples for prediction.

        - save_results(input: Dict[str, Any], output: Any) -> None:
            Abstract method for saving prediction results.

        - args: Dict[str, Any]
            Arguments specific to the processor.

get_args(script_path: str, log_filepath: str, **kwargs) -> None:
    A function to retrieve arguments for the script.

    Parameters:
        - script_path: str
            The script path.

        - log_filepath: str
            The log file path.

        - kwargs: Any
            Additional keyword arguments.

prep_for_prediction(model: torch.nn.Module, id: str, save_dir_path: str, bbox_threshold: float,
                    device: torch.device, pred_processor_name: str) -> Processor:
    Prepares the model and environment for prediction.

    Parameters:
        - model: torch.nn.Module
            The model for prediction.

        - id: str
            The ID for the prediction process.

        - save_dir_path: str
            The directory path for saving prediction results.

        - bbox_threshold: float
            The threshold for bounding box predictions.

        - device: torch.device
            The device for prediction (e.g., CPU or GPU).

        - pred_processor_name: str
            The name of the prediction processor.

    Returns:
        - Processor:
            The prediction processor.

predict(model: torch.nn.Module, device: torch.device, target_geojson_strs: List[str],
        start: str, stop: str, pred_processor: Processor) -> None:
    Performs prediction using the provided model and prediction processor.

    Parameters:
        - model: torch.nn.Module
            The model for prediction.

        - device: torch.device
            The device for prediction (e.g., CPU or GPU).

        - target_geojson_strs: List[str]
            The list of target GeoJSON strings.

        - start: str
            The start time for prediction.

        - stop: str
            The end time for prediction.

        - pred_processor: Processor
            The prediction processor to be used.

---

Constants:
    - SCRIPT_PATH: str
        The path of the script for prediction.

    - PRED_PROCESSORS: Dict[str, Type[Processor]]
        A dictionary mapping prediction processor names to their corresponding classes.

Module: script_utils.py

__author__:
    - Richard Correro (richard@richardcorrero.com)

Description:
    This module provides utility functions for script execution and argument parsing.

Constants:
    - SCRIPT_PATH: The filename of the script.

    - DEFAULT_LOGGING: The default logging level.

    - DEFAULT_TIME_STR: The default timestamp string format.

    - DEFAULT_LOG_DIR: The default directory for log files.

    - RANDOM_STRING_SEED: The seed used for generating random strings.

Functions:
    - parse_args(parser: argparse.ArgumentParser) -> dict:
        Parses command line arguments and returns them as a dictionary.

    - get_random_string(length: int = 12, allowed_chars: str = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789') -> str:
        Generates a securely random string of the specified length using the provided character set.

    - tuple_to_args(fn, is_method: Optional[bool] = False) -> function:
        Decorator function to convert a tuple argument to individual arguments for a function or method.

    - async_tuple_to_args(fn, is_method: Optional[bool] = False) -> coroutine function:
        Decorator function to convert a tuple argument to individual arguments for an asynchronous function or method.

    - arg_is_true(arg_str: str) -> bool:
        Checks if the string argument represents a boolean True value.

    - arg_is_false(arg_str: str) -> bool:
        Checks if the string argument represents a boolean False value.

    - get_args(script_path, logging_level = DEFAULT_LOGGING, time_str = DEFAULT_TIME_STR, log_dir = DEFAULT_LOG_DIR, log_filepath = None, verbose = True, secret_keys = list(), format_str = "%(asctime)s | %(message)s", **kwargs) -> dict:
        Parses command line arguments, sets up logging, and returns a dictionary of arguments.

        Parameters:
            - script_path: The filename of the script.
            - logging_level: The desired logging level. Default is DEFAULT_LOGGING.
            - time_str: The timestamp string format. Default is DEFAULT_TIME_STR.
            - log_dir: The directory for log files. Default is DEFAULT_LOG_DIR.
            - log_filepath: The path to a local log file. If None, a default filepath is generated. Default is None.
            - verbose: Whether to print the arguments to the console. Default is True.
            - secret_keys: List of keys to be redacted in the log file. Default is an empty list.
            - format_str: The format string for log messages. Default is "%(asctime)s | %(message)s".
            - **kwargs: Additional keyword arguments to include in the returned dictionary.

        Returns:
            - p_args: A dictionary containing the parsed arguments.

Usage:
    - Import the module and use the provided functions for script execution and argument parsing.
    - Example:
        ```
        from script_utils import parse_args, get_random_string

        parser = argparse.ArgumentParser()
        args = parse_args(parser)
        random_string = get_random_string()
        ```

Note:
    - This module requires the following dependencies: argparse, hashlib, logging, functools, os, random, time, typing.
    - The module uses a secure random number generator if available, falling back to the Mersenne Twister otherwise.

Module Documentation: tasks.py

This module contains tasks for analyzing and generating media based on target geojsons using a pre-trained model.

Author:
- Richard Correro (richard@richardcorrero.com)

Functions:
- analyze(
    start: str, stop: str, target_geojsons: List[str], process_uid: str, bbox_threshold: float
) -> dict:
  - Analyze target geojsons within a specified time range.
  - Parameters:
    - start (str): The start time in the format "%Y_%m".
    - stop (str): The stop time in the format "%Y_%m".
    - target_geojsons (List[str]): The list of target geojsons.
    - process_uid (str): The unique identifier for the analysis process.
    - bbox_threshold (float): The bounding box threshold.
  - Returns:
    - dict: A dictionary containing the signed URL of the analysis results.

- make_media(
    start: str, stop: str, target_geojsons: List[str], process_uid: str
) -> dict:
  - Generate media based on target geojsons within a specified time range.
  - Parameters:
    - start (str): The start time in the format "%Y_%m".
    - stop (str): The stop time in the format "%Y_%m".
    - target_geojsons (List[str]): The list of target geojsons.
    - process_uid (str): The unique identifier for the media generation process.
  - Returns:
    - dict: A dictionary containing the signed URL of the generated media.

Global Variables:
- MODEL_NAME (str): The name of the pre-trained model.
- MODEL_PATH (str): The file path of the pre-trained model.
- MODEL_UID (str): The unique identifier of the pre-trained model.
- PRED_PROCESSOR (str): The name of the prediction processor.
- MEDIA_MAKER (str): The name of the media maker.
- DEVICE (str): The device to run the analysis on.
- GCS_CREDS_PATH (str): The file path of the GCS credentials JSON file.
- BUCKET_NAME (str): The name of the GCS bucket.
- OUTPUT_FILE_TYPE (str): The content type of the output file.
- SIGNED_URL_EXPIRATION_MINUTES (int): The expiration time of the signed URL in minutes.
- CLIENT (storage.Client): The GCS client object.
- MODEL (torch.nn.Module): The loaded pre-trained model.

Dependencies:
- io: Provides the BytesIO class for working with in-memory binary data.
- json: Provides functions for working with JSON data.
- os: Provides functions for interacting with the operating system.
- shutil: Provides functions for file and directory operations.
- datetime: Provides classes for manipulating dates and times.
- typing: Provides support for type hints.
- torch: The PyTorch library for deep learning.
- google.cloud.storage: The Google Cloud Storage library for interacting with GCS.
- ..celery_config.celery: The Celery configuration module.
- ..inference.load_model_from_file: The module for loading models from file.
- ..inference.pred_processors: The module for prediction processors.
- ..inference.predict: The module for performing predictions.
- ..inference.make_media: The module for generating media.
- ..utils: The module containing utility functions.

Note:
- The module assumes that the required dependencies are installed and accessible.
- Make sure to configure the necessary environment variables for proper execution.

Module Documentation: exceptions.py

This module defines two custom exception classes used for specific error handling purposes.

Author:
- Richard Correro (richard@richardcorrero.com)

Classes:
- MalformedDateStringError(Exception)
  - Represents an error that occurs when a date string is malformed or does not adhere to the required format.

- IDNotFoundError(Exception)
  - Represents an error that occurs when an ID is not found or does not exist.

Usage:
- These exception classes can be raised in the code to handle specific error scenarios.
- Use these classes as base classes for custom exceptions or handle them directly in the code where appropriate.

Note:
- No additional functionality or attributes are provided in these exception classes. They serve as markers for specific types of errors.

Module Documentation: utils.py

This module provides various utility functions for working with files, directories, and Google Cloud Storage (GCS).

Author:
- Richard Correro (richard@richardcorrero.com)

Functions:
- get_datetime(time_str: str) -> datetime:
  - Convert a time string to a datetime object.
  - Parameters:
    - time_str (str): The time string to convert.
  - Returns:
    - datetime: The datetime object.
  - Raises:
    - MalformedDateStringError: If the time string is not in the format "%Y_%m".

- get_env_var_with_default(env_var_name: str, default: Any) -> Any:
  - Retrieve the value of an environment variable with a default fallback value.
  - Parameters:
    - env_var_name (str): The name of the environment variable.
    - default (Any): The default value to use if the environment variable is not found.
  - Returns:
    - Any: The value of the environment variable or the default value.

- hash_string(string: str) -> str:
  - Hash a string using the SHA-256 algorithm.
  - Parameters:
    - string (str): The string to hash.
  - Returns:
    - str: The hashed string.

- zip_directory_as_bytes(directory_path: str) -> io.BytesIO:
  - Create a zip archive of a directory.
  - Parameters:
    - directory_path (str): The path to the directory to zip.
  - Returns:
    - io.BytesIO: The zip archive data as a BytesIO object.

- upload_file_to_gcs(
    zip_file_data: io.BytesIO, blob_name: str, client: storage.Client, 
    bucket_name: str, content_type: Optional[str] = 'application/zip',
) -> None:
  - Upload a file to Google Cloud Storage (GCS).
  - Parameters:
    - zip_file_data (io.BytesIO): The zip archive data as a BytesIO object.
    - blob_name (str): The name of the blob to create in GCS.
    - client (storage.Client): The GCS client object.
    - bucket_name (str): The name of the GCS bucket to upload to.
    - content_type (Optional[str]): The content type of the file (default is 'application/zip').
  - Returns:
    - None

- get_signed_url(
    blob_name: str, client: storage.Client, bucket_name: str,
    exp_minutes: Optional[int] = 60
) -> str:
  - Generate a signed URL for accessing a file in GCS.
  - Parameters:
    - blob_name (str): The name of the blob in GCS.
    - client (storage.Client): The GCS client object.
    - bucket_name (str): The name of the GCS bucket.
    - exp_minutes (Optional[int]): The expiration time of the signed URL in minutes (default is 60).
  - Returns:
    - str: The signed URL.

- blob_exists(bucket_name: str, blob_name: str, gcs_creds_path: str) -> bool:
  - Check whether a blob exists in a GCS bucket.
  - Parameters:
    - bucket_name (str): The name of the GCS bucket.
    - blob_name (str): The name of the blob.
    - gcs_creds_path (str): The path to the GCS credentials JSON file.
  - Returns:
    - bool: True if the blob exists, False otherwise.

Dependencies:
- hashlib: Provides various hash functions.
- io: Provides the BytesIO class for working with in-memory binary data.
- os: Provides functions for interacting with the operating system.
- zipfile: Provides classes for creating and extracting ZIP archives.
- datetime: Provides classes for manipulating dates and times.
- typing: Provides support for type hints.
- google.cloud.storage: The Google Cloud Storage library for interacting with GCS.

Note:
- The module assumes that the required dependencies are installed and accessible.
- Make sure to configure the necessary environment variables for proper execution.
